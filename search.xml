<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Containerd使用</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Containerd"><a href="#安装Containerd" class="headerlink" title="安装Containerd"></a>安装Containerd</h2><p>1.加载系统模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/containerd.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure><p>2.添加系统内核参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>3.安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>4.添加仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">sed -i <span class="string">&#x27;s+download.docker.com+mirrors.cloud.tencent.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>5.安装containerd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install containerd.io-1.4.4-3.1.el7 -y</span><br></pre></td></tr></table></figure><p>6.创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/containerd</span><br><span class="line">containerd config default | sudo <span class="built_in">tee</span> /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>7.重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart containerd</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line">systemctl status containerd</span><br></pre></td></tr></table></figure><h2 id="配置Containetd网络"><a href="#配置Containetd网络" class="headerlink" title="配置Containetd网络"></a>配置Containetd网络</h2><p>1.安装软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget vim unzip -y</span><br></pre></td></tr></table></figure><p>2.创建默认cni插件目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/cni/bin/</span><br><span class="line">wget https://github.com/containernetworking/plugins/releases/download/v0.8.5/cni-plugins-linux-amd64-v0.8.5.tgz</span><br><span class="line">tar zxf cni-plugins-linux-amd64-v0.8.5.tgz -C /opt/cni/bin/</span><br></pre></td></tr></table></figure><p>3.创建桥接网络配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/cni/net.d</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/cni/net.d/10-bgnet.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;cniVersion&quot;:&quot;0.4.0&quot;,</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;bgnet&quot;,</span></span><br><span class="line"><span class="string">    &quot;type&quot;: &quot;bridge&quot;,</span></span><br><span class="line"><span class="string">    &quot;bridge&quot;: &quot;cni0&quot;,</span></span><br><span class="line"><span class="string">    &quot;isGateway&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;ipMasq&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;ipam&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;host-local&quot;,</span></span><br><span class="line"><span class="string">        &quot;subnet&quot;: &quot;192.100.1.0/24&quot;,</span></span><br><span class="line"><span class="string">        &quot;rangeStart&quot;: &quot;192.100.1.100&quot;,</span></span><br><span class="line"><span class="string">        &quot;rangeEnd&quot;: &quot;192.100.1.200&quot;,</span></span><br><span class="line"><span class="string">        &quot;gateway&quot;: &quot;192.100.1.1&quot;,</span></span><br><span class="line"><span class="string">        &quot;routes&quot;: [</span></span><br><span class="line"><span class="string">        &#123; &quot;dst&quot;: &quot;0.0.0.0/0&quot; &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>4.安装CNITOOLS，用于CNI创建网络的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> cnitool /usr/local/bin/</span><br></pre></td></tr></table></figure><p>5.创建一个网络命名空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CNI_PATH=/opt/cni/bin</span><br><span class="line">ip netns add t1</span><br></pre></td></tr></table></figure><p>6.创建一个网络bgnet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnitool add bgnet /var/run/netns/t1</span><br></pre></td></tr></table></figure><p>7.检查测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络地址分配</span></span><br><span class="line">ip netns <span class="built_in">exec</span> t1 ip addr</span><br><span class="line">ip -n t1 addr</span><br><span class="line"><span class="comment">#查看路由表</span></span><br><span class="line">ip netns <span class="built_in">exec</span> t1 ip route</span><br><span class="line">ip -n t1 route</span><br></pre></td></tr></table></figure><p>8.日志查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/messages -n 200</span><br></pre></td></tr></table></figure><h2 id="ctr命令行工具"><a href="#ctr命令行工具" class="headerlink" title="ctr命令行工具"></a>ctr命令行工具</h2><p>0.概述</p><blockquote><p>ctr是Containerd的一个客户端工具，ctr -v输出的是Containerd的版本。</p></blockquote><p>1.命令对比</p><table><thead><tr><th align="center">操作</th><th>ctr</th><th>docker</th></tr></thead><tbody><tr><td align="center">查看镜像</td><td>ctr images ls</td><td>docker images</td></tr><tr><td align="center">镜像导入&#x2F;导出</td><td>ctr images import&#x2F;exporter</td><td>docker load&#x2F;save</td></tr><tr><td align="center">镜像拉取&#x2F;推送</td><td>crr images pull&#x2F;push</td><td>docker pull&#x2F;push</td></tr><tr><td align="center">镜像打tag</td><td>ctr images tag</td><td>docker tag</td></tr></tbody></table><p>2.查看镜像列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr image list</span><br></pre></td></tr></table></figure><p>3.拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctr image pull docker.io/library/nginx:latest</span><br><span class="line">ctr i pull docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure><p>4.创建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr c create docker.io/library/nginx:latest nginx</span><br></pre></td></tr></table></figure><p>5.查看创建的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr c list</span><br></pre></td></tr></table></figure><p>6.启动容器任务，create命令创建了容器后，并没有处于运行状态，只是一个静态的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr task start -d nginx</span><br></pre></td></tr></table></figure><p>7.查看容器任务列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr task list</span><br></pre></td></tr></table></figure><p>8.进入一个运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须要指定 --exec-id ,id自定义但必须唯一</span></span><br><span class="line">ctr task <span class="built_in">exec</span> --exec-id 0 -t nginx sh</span><br></pre></td></tr></table></figure><p>9.暂停一个运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr task pause nginx</span><br></pre></td></tr></table></figure><p>10.恢复一个运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr task resume nginx</span><br></pre></td></tr></table></figure><p>11.停止容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr task <span class="built_in">kill</span> nginx</span><br></pre></td></tr></table></figure><p>12.查看容器中所有进程的PID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctr task ps nginx</span><br></pre></td></tr></table></figure><h2 id="crictl命令行工具"><a href="#crictl命令行工具" class="headerlink" title="crictl命令行工具"></a>crictl命令行工具</h2><p>0.概述</p><blockquote><p>crictl是遵循CRI接口规范的一个命令行工具，常用来检查和管理kubelet节点上的容器运行时和镜像，crivtl -v输出的是当前K8S的版本。</p><p><code>如果使用了crictl在已运行的Kubernetes集群上创建Pod沙箱或容器，Kubelet最终将删除它们。</code></p></blockquote><p>1.下载crictl，需要注意支持的kubernetes版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.17.0/crictl-v1.17.0-linux-amd64.tar.gz</span><br><span class="line">tar xvf crictl-v1.17.0-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> crictl /usr/bin/</span><br></pre></td></tr></table></figure><p>2.编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对接Containerd,需要注意Containerd路径</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/crictl.yaml &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">runtime-endpoint: unix:///run/containerd/containerd.sock</span><br><span class="line">image-endpoint: unix:///run/containerd/containerd.sock</span><br><span class="line"><span class="built_in">timeout</span>: 10</span><br><span class="line">debug: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#对接Docker</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/crictl.yaml &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">runtime-endpoint: unix:///var/run/dockershim.sock</span><br><span class="line">image-endpoint: unix:///var/run/dockershim.sock</span><br><span class="line"><span class="built_in">timeout</span>: 10</span><br><span class="line">debug: <span class="literal">true</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>3.通过crictl创建一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; pod-config.json &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;metadata&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;demo-nginx-sandbox&quot;</span>,</span><br><span class="line">        <span class="string">&quot;namespace&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;attempt&quot;</span>: 1,</span><br><span class="line">        <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;hdishd83djaidwnduwk28bcs1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;logDirectory&quot;</span>: <span class="string">&quot;/tmp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;linux&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>4.应用JSON文件并运行沙盒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl runp pod-config.json</span><br></pre></td></tr></table></figure><p>5.列出容器沙盒并检查沙盒是否处于就绪状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl pods</span><br></pre></td></tr></table></figure><p>6.查看Pod详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl inspectp [Pod ID]</span><br></pre></td></tr></table></figure><p>7.创建Nginx容器的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">crictl</span> <span class="string">pull</span> <span class="string">nginx</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">container-config.json</span> <span class="string">&lt;&lt;</span> <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;metadata&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;:</span> <span class="string">&quot;nginx-container&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;namespace&quot;:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;image&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">      <span class="attr">&quot;image&quot;:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;command&quot;:</span> [],</span><br><span class="line">  <span class="string">&quot;log_path&quot;</span><span class="string">:&quot;nginx.log&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;linux&quot;:</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>8.创建容器，传递之前创建的Pod的ID、容器配置文件和Pod配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl create $(crictl pods -q demo-nginx-sandbox) container-config.json pod-config.json</span><br></pre></td></tr></table></figure><p>9.查询所有的容器并确认新创建的容器状态为Created</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl ps -a</span><br></pre></td></tr></table></figure><p>10.启动容器时需要将容器ID传递给crictl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl start $(crictl ps -a -q nginx-container)</span><br></pre></td></tr></table></figure><p>11.查询容器运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl ps -a |grep nginx-container</span><br></pre></td></tr></table></figure><p>12.创建端口转发，需要Pod ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crictl port-forward $(crictl pods -q demo-nginx-sandbox) 9191:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">curl localhost:9191</span><br></pre></td></tr></table></figure><p>13.在一个正在运行的容器上执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crictl <span class="built_in">exec</span> -i -t $(crictl ps -q nginx-container) sh</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="Docker和Containerd常用命令对比"><a href="#Docker和Containerd常用命令对比" class="headerlink" title="Docker和Containerd常用命令对比"></a>Docker和Containerd常用命令对比</h2><table><thead><tr><th align="center">操作</th><th align="center">docker</th><th align="center">crictl</th><th align="center">ctr</th></tr></thead><tbody><tr><td align="center">查看容器列表</td><td align="center">docker ps</td><td align="center">crictl ps</td><td align="center">ctr -n k8s.io c ls</td></tr><tr><td align="center">查看容器详情</td><td align="center">docker inspect</td><td align="center">crictl inspect</td><td align="center">ctr -n k8s.io c info</td></tr><tr><td align="center">查看容器日志</td><td align="center">docker logs</td><td align="center">crictl logs</td><td align="center">无</td></tr><tr><td align="center">容器内执行命令</td><td align="center">docker exec</td><td align="center">crictl exec</td><td align="center">无</td></tr><tr><td align="center">显示容器资源使用情况</td><td align="center">docker stats</td><td align="center">crictl stats</td><td align="center">无</td></tr><tr><td align="center">创建容器</td><td align="center">docker create</td><td align="center">crictl create</td><td align="center">ctr -n k8s.io c create</td></tr><tr><td align="center">启动容器</td><td align="center">docker start</td><td align="center">crictl start</td><td align="center">ctr -n k8s.io run</td></tr><tr><td align="center">停止容器</td><td align="center">docker stop</td><td align="center">crictl stop</td><td align="center">无</td></tr><tr><td align="center">删除容器</td><td align="center">docker rm</td><td align="center">crictl rm</td><td align="center">ctr -n k8s.io c del</td></tr><tr><td align="center">查看镜像列表</td><td align="center">docker images</td><td align="center">crictl images</td><td align="center">ctr -n k8s.io i ls</td></tr><tr><td align="center">查看镜像详情</td><td align="center">docker inspect</td><td align="center">crictl inspecti</td><td align="center">无</td></tr><tr><td align="center">拉取镜像</td><td align="center">docker pull</td><td align="center">crictl pull</td><td align="center">ctr -n k8s.io i pull</td></tr><tr><td align="center">推送镜像</td><td align="center">docker push</td><td align="center">无</td><td align="center">ctr -n k8s.io i push</td></tr><tr><td align="center">删除镜像</td><td align="center">docker rmi</td><td align="center">crictl rmi</td><td align="center">ctr -n k8s.io i rm</td></tr><tr><td align="center">查看Pod列表</td><td align="center">无</td><td align="center">crictl pods</td><td align="center">无</td></tr><tr><td align="center">查看Pod详情</td><td align="center">无</td><td align="center">crictl inspectp</td><td align="center">无</td></tr><tr><td align="center">启动Pod</td><td align="center">无</td><td align="center">crictl runp</td><td align="center">无</td></tr><tr><td align="center">停止Pod</td><td align="center">无</td><td align="center">crictl stopp</td><td align="center">无</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
